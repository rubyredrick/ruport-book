h2. Cheatsheet: Using Report and ReportManager 
    
Ruport's <tt>Report</tt> class is meant to provide a high level interface to some of Ruport's core libraries and utilities.

<tt>Report</tt> provides easy ways to work with <tt>Ruport::Query</tt>
and <tt>Ruport::Mailer</tt>, and also provides rendering shortcuts.  These
features make it easier to tie together some of Ruport's lower level bits
into a single object. 

h3. Dealing with Controllers

<tt>Report</tt> uses simple hooks to make it act like a 
<tt>Controller</tt> object. The following code is an example of rendering tables:

<pre>
class MyReport < Ruport::Report

  renders_as_table   

  attr_accessor :file

  def renderable_data(format)
     t = Table(file)
     t.sub_table { |r| r.a == "foo" }
  end

end

MyReport.generate do |report|
  report.file = "in.csv"
  report.save_as "out.csv" # renders to csv
  report.save_as "out.pdf" # renders to pdf
  puts report.to_text # renders to screen as text
end
</pre>   

The other default controllers are also supported, named <tt>renders_as_row</tt>,
<tt>renders_as_group</tt>, and <tt>renders_as_grouping</tt>.  The data returned
by <tt>renderable_data(format)</tt> will be passed to the controller you specify.

You can also pass default options to your controller if needed, e.g.

<pre>
  renders_as_table :show_table_headers => false
</pre>

h4. Using Custom Controllers

Most interesting Ruport applications make use of custom controllers. It is
trivial to make use of them with your reports:

<pre>
class MyReport < Ruport::Report
  renders_with MyCustomController

  def renderable_data(format)
    # the return of this will be passed as :data to MyCustomController
  end
end
</pre>

You can then continue to use <tt>as()</tt>, <tt>save_as()</tt>, and the 
<tt>to_format</tt> shortcuts.
   
h4. Details About the <tt>save_as()</tt> Magic

For the <tt>save_as()</tt> function, the follow mappings are used:

<pre> 
  save_as("foo.txt") forwards to as(:text)
  save_as("foo.pdf") forwards to as(:pdf) and writes as a binary
  save_as("foo.csv") forwards to as(:csv)
  save_as("foo.html") forwards to as(:html) 
</pre>

For other extensions, if your controller handles them you can still use @save_as()@, it will just convert the extension to a symbol and pass it to <tt>as()</tt>.

Example: <tt>save_as("foo.xml")</tt> forwards to <tt>as(:xml)</tt>

These formats will be written using text mode by default, rather than binary.
You can specify file access flags if needed, e.g.

<pre>
  save_as("foo.jpg", :flags => "wb")
</pre>  

h3. Using <tt>query()</tt> for Raw SQL Operations

The following example shows a report which sets up a number of database
sources and then generates grouped output.  <tt>query()</tt> is a shortcut
interface to <tt>Ruport::Query</tt>, covering the most common needs.

<pre>
class MyReport < Ruport::Report
  
  renders_as_grouping

  attr_accessor :source

  def prepare
     add_source :legacy, :dsn => "dbi:mysql:old_db",  :user => :root
     add_source :default, :dsn => "dbi:mysql:new_db", :user => :root
  end

  def renderable_data(format)
     results = query "select name, email from foo where num < 10",
                     :source => source

     Grouping(results,:by => "name")
  end
end 

legacy_report = MyReport.new
legacy_report.source = :legacy
legacy_report.save_as "foo.csv"

new_report = MyReport.new # will use :default source
new_report.save_as "bar.csv"
</pre> 

h3. Mailing Reports via <tt>Report#send_to()</tt>

<tt>Report</tt> offers an alternate interface to <tt>Ruport::Mailer</tt>.
This allows you to easily attach reports to an email and send them via SMTP.

The following example is for using the Report class directly, but would work
for subclasses as well.

<pre>
r = Ruport::Report.new

r.add_mailer :default,
             :host => "mail.adelphia.net",
             :address => "gregory.t.brown@gmail.com"

r.send_to("gregory.t.brown@gmail.com") do |mail|
  mail.subject = "Hello"
  mail.attach "foo.csv"
  mail.text = "This is an email with attached csv"
end
</pre>

h3. Some Quick Notes for Using <tt>Report</tt> in <tt>rope</tt>
     
This information is covered in more detail in the @rope@ cheatsheet, but the
following notes are provided as a quick reference.

h4. Generating a Report

<pre>
rake build report=my_report 
</pre>

h4. Running a Report

<pre>
rake run report=my_report
</pre>

h4. Setting up Sources for <tt>query()</tt>

If you'd like to share sources between reports, define them in 
<tt>config/environment.rb</tt>.

h4. Using Autogenerated Controllers
      
To generate the controller definition:

<pre>
rake build controller=my_controller
</pre>

In your report, add <tt>require "lib/controllers"</tt> and the call:

<pre>
renders_with MyController
</pre>    

h3. Managing Many <tt>Report</tt> Objects

In the ruport-util package there is a tool called 
<tt>ReportManager</tt> that allows you to select different reports 
programatically.  This might be useful in web applications, where you'd like
to determine which class should generate a report via a drop down menu.

The following simple example shows how this might be used:

<pre>
class Mars < Ruport::Report
  
  acts_as_managed_report
  renders_as_table

  def renderable_data(format)
    Table("mars.csv")
  end
end 

class Venus < Ruport::Report
  
  acts_as_managed_report 
  renders_as_table

  def renderable_data(format)
    Table("venus.csv")
  end
end    
 
["Mars","Venus"].each do |n|
  Ruport::ReportManager[n].generate { |r| r.save_as "#{n}.pdf" }  
end
</pre> 

Typically, it might be easier to just store report instances in a hash lookup,
but there are certain cases where you'll want to be able to dynamically
register and run reports, which is easy to do with <tt>ReportManager</tt>.

If you need to override the name of a report, add a <tt>name</tt> method to it
which returns a string to identify the report with.         

h3. Related Resources / Digging Deeper

<tt>Report</tt> is really most useful when used in conjunction with
<tt>rope</tt>, so you'll want to review that cheatsheet. (footnote: See rope
cheatsheet.)

Also, much of the heavy lifting can and should be done by your controllers,
especially using the various hooks available in them.  This class is among the
feature sets in the ruport-util package that is likely to change over time to
adapt to people's needs.  
