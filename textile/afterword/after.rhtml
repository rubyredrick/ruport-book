h2. After the Book

This book has provided a tour through the major components of Ruport. At the level
of the software, you've seen how to collect data and process that data into a form
that Ruport can use. You've also seen how to use Ruport's formatting system to
output that data into your report. Along the way, we've shown you how Ruport fits
into a real application and demonstrated some of the libraries associated with the
core project.

With that background, you should be able to produce some pretty fancy reports, but
there are a number of avenues we haven't explored here. We covered all of the
major functionality of Ruport, but this book isn't intended as a comprehensive
reference manual. To get all of the details on what Ruport can do, the API docs
are the best resource and are located at http://api.rubyreports.org.

Although this book mainly covered the Ruport core, the overall Ruby Reports
project includes several other sub-projects. You've seen ruport-util and
acts_as_reportable in action throughout the book, but especially with ruport-util,
there is a lot we didn't cover. For instance, ruport-util contains interfaces to
several other graphing libraries, support for producing Excel and OpenDocument
spreadsheet output, a simple invoicing module and more.

Some of what we did show you, such as the PDF form helpers and the mail support,
have many features that we didn't cover. In addition, ruport-util is the home of
those parts of the project that we feel are either are not general or not mature
enough to be included in Ruport core, and as such it is constantly evolving. You
definitely want to keep an eye on what's happening in ruport-util.

One independent project that falls under the umbrella of Ruby Reports is
Documatic. Documatic is an OpenDocument extension for Ruport. It is a
template-driven formatter that can be used to produce attractive printable
documents such as database reports, invoices, letters, faxes and more.

Another project falling under the Ruby Reports scope is Ruport/Rails. It is a
plugin that integrates Ruport with the Rails web development framework, allowing
you to use Ruport's formatting system within your views. If you're using Ruport
within Rails, it's worth a look.

The main Ruport web site is located at http://rubyreports.org. It contains many
useful resources to get you more acquainted with the overall project and links to
other locations where you can find Ruport-related material. The web site for this
book is located at http://ruportbook.com. It contains HTML-formatted versions of
the book content, as well as up-to-date news and errata. We maintain a blog about
Ruby Reports at http://blog.rubyreports.org for general project news. The official
developer resource listing for Ruby Reports is located at code.rubyreports.org.
There you can find repository locations, wikis, bug trackers, and other essential
details for Ruport and its related projects.

There is an active community surrounding the Ruby Reports project. Once you get
your feet wet with some reporting, you may want to get involved. We maintain an
active mailing list at http://list.rubyreports.org so please sign up there to keep
up to date with the project. On the mailing list, you can get announcements, ask
questions, or participate in discussions about Ruport. You can also catch up with
the developers and community members on the #ruport channel on Freenode.

Though we often have discussions about feature requests, bugs, and other
development related things on the main mailing list, we also maintain a
developers' mailing list to announce developer meetings or discuss changes that
affect the internals of Ruport. It's by invite only, but we approve any requests
to join that aren't from spammers. You can find the dev-list at
http://groups.google.com/group/ruport-dev.

Thanks very much for reading and happy reporting!



